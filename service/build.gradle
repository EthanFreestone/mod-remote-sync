buildscript {
  repositories {
    maven { url "https://repo.grails.org/grails/core" }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
    classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.6"
    classpath "org.grails.plugins:hibernate5:7.3.0"
    classpath "org.grails.plugins:views-gradle:2.3.2"
    classpath 'org.grails.plugins:database-migration:3.1.0'
    classpath 'com.bmuschko:gradle-docker-plugin:6.6.1'
    classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.4.0.2513'
  }
}


final String version_regex = /^(((\d+)\.\d+)\.\d+)(-([a-zA-Z]+(\.\d+)?))?$/
Map<String, String> env = System.getenv();
String calculated_version = null;

if ( ( appVersion.contains('SNAPSHOT') ) && ( env.BUILD_NUMBER != null ) ) {
  println("Detected snapshot version and build number - appending");
  calculated_version = "${appVersion}.${env.BUILD_NUMBER}".toString()
}
else {
  println("Release version");
  calculated_version = "${appVersion}".toString()
}

version "${calculated_version}"
group "org.olf"

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.grails.grails-web'
apply plugin: 'org.grails.plugins.views-json'
apply plugin: 'com.github.erdi.webdriver-binaries'
apply plugin: 'com.bmuschko.docker-remote-api'

eclipse {
  classpath {
    file {
      whenMerged {
        def confEntries = (entries.findAll { it.path == 'grails-app/conf' }) as List
        
        if (confEntries) {
          def singleEnty = confEntries[0]
          
          // Remove all the entries.
          entries.removeAll ( confEntries )
          
          // Set the output directory, and re-add.
          singleEnty.output = "bin/main"
          entries << singleEnty
        }
      }
    }
  }
}

repositories {
  maven { url 'https://maven.k-int.com/content/repositories/public' }
  mavenLocal()
  maven { url 'https://repo.grails.org/grails/core' }
  maven { url 'https://maven.indexdata.com/' }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

sourceSets {
  main {
    resources {
      srcDir 'grails-app/migrations'
      srcDir 'src/main/okapi/tenant'
    }
  }
}

dependencies {

  implementation "org.springframework.boot:spring-boot-starter-logging"
  implementation "org.springframework.boot:spring-boot-autoconfigure"
  implementation "org.grails:grails-core"
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.grails:grails-plugin-url-mappings"
  implementation "org.grails:grails-plugin-rest"
  implementation "org.grails:grails-plugin-codecs"
  implementation "org.grails:grails-plugin-interceptors"
  implementation "org.grails:grails-plugin-services"
  implementation "org.grails:grails-plugin-datasource"
  implementation "org.grails:grails-plugin-databinding"
  implementation "org.grails:grails-web-boot"
  implementation "org.grails:grails-logging"
  implementation "org.grails.plugins:async"
  implementation "org.grails.plugins:views-json"
  implementation "org.grails.plugins:views-json-templates"
  implementation "org.grails.plugins:events"
  implementation "org.grails.plugins:hibernate5"


  runtimeOnly "org.glassfish.web:el-impl:2.2.1-b05"
  runtimeOnly "com.h2database:h2"
  runtimeOnly "org.apache.tomcat:tomcat-jdbc"
  runtimeOnly "javax.xml.bind:jaxb-api:2.3.1"
  runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:3.4.6"
  testImplementation "io.micronaut:micronaut-inject-groovy"
  testImplementation "org.grails:grails-gorm-testing-support"
  testImplementation "org.mockito:mockito-core"
  testImplementation "org.grails:grails-web-testing-support"
  testImplementation "org.grails.plugins:geb"
  testImplementation "org.seleniumhq.selenium:selenium-remote-driver:4.0.0"
  testImplementation "org.seleniumhq.selenium:selenium-api:4.0.0"
  testImplementation "org.seleniumhq.selenium:selenium-support:4.0.0"
  testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:4.0.0"
  testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:4.0.0"

  profile "org.grails.profiles:rest-api"
  // runtime "com.h2database:h2"
  runtimeOnly "com.zaxxer:HikariCP:3.2.0"
  

  /************** Testing ************/
  testImplementation "org.grails:grails-gorm-testing-support"

  testImplementation "org.mockito:mockito-core"
  testImplementation "org.grails:grails-web-testing-support"
  testImplementation "org.grails.plugins:geb"
  implementation 'org.z3950.zing:cql-java:1.13'
  implementation "org.springframework.boot:spring-boot-starter-undertow" // Replaces spring-boot-starter-tomcat
  implementation "org.hibernate:hibernate-core:5.4.19.Final"             // Update to latest 5.4
  implementation "org.hibernate:hibernate-java8:5.4.19.Final"
  runtimeOnly "com.zaxxer:HikariCP:3.4.5"                             // Replaces Tomcat JDBC pool
  runtimeOnly "org.postgresql:postgresql:42.3.1"

  implementation ('org.grails.plugins:database-migration:3.1.0') {       // Required by Grails Okapi
    exclude group: 'org.liquibase', module: 'liquibase-core'
  }
  implementation 'org.liquibase:liquibase-core:3.9.0'

  implementation 'com.opencsv:opencsv:4.6'
  implementation 'commons-io:commons-io:2.6'


  implementation 'com.k_int.grails:web-toolkit-ce:6.0.2'
  implementation 'com.k_int.okapi:grails-okapi:4.1.2'

  // Custom non profile deps.
  implementation 'org.apache.kafka:kafka-clients:2.3.0'
  implementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
  
  // Better test reports.
  testImplementation( 'com.athaydes:spock-reports:1.6.1' ) {
    transitive = false // this avoids affecting your version of Groovy/Spock
  }
}

bootRun {
  ignoreExitValue true
  jvmArgs(
      '-Dspring.output.ansi.enabled=always',
      '-server',
      '-noverify',
      '-XX:TieredStopAtLevel=1',
      '-Xmx1024m')
  sourceResources sourceSets.main
  String springProfilesActive = 'spring.profiles.active'
  systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

task generateDescriptors(type: Copy) {

  dependsOn buildProperties

  File grailsBuildInfoFile = buildProperties.outputs.files.files.find { it.name == 'grails.build.info' }

  final def props = [:]

  if(!(grailsBuildInfoFile)) return // No need to continue if the file is not there

  doFirst {

    // Place the loading within a do first as the info file from the buildProperties
    // task will not be present until it is executed. This owuld cause a file not found
    // during task configureation otherwise.
    Properties properties = new Properties()

    // Read properties from the file
    grailsBuildInfoFile.withInputStream {
      properties.load(it)
    }

    // Need to parse multi-dimensional keys.
    ConfigSlurper cs = new ConfigSlurper()
    props.putAll(cs.parse(properties))
  }

  from ('./src/main/okapi') {
    include '*-template.json'
  }
  into './build/resources/main/okapi'
  filteringCharset = 'UTF-8'
  expand(props)
  rename { String fileName ->
    fileName.replace('-template', '')
  }
}

// Ian : removing this to make build compatible with FOLIO Jenkinsfile - hope it doesn't mess up our local CI/CD
// jar {
//   version "${version.replaceAll(version_regex, '$2')}"
// }

buildProperties.doLast {

  // Find the right file
  File grailsBuildInfoFile = it.outputs.files.files.find { it.name == 'grails.build.info' }

  if(!grailsBuildInfoFile) {
    System.err.println("Unable to locate grails.build.info");
    return // No need to continue if the file is not there
  }

  Properties properties = new Properties()

  // Read properties from the file
  grailsBuildInfoFile.withInputStream {
    properties.load(it)
  }

  // Load the app version
  String version = properties.getProperty('info.app.version')
  def versionParts
  if (version && (versionParts = version =~ version_regex)) {
    println("Version parts : ${versionParts[0]}");
    versionParts[0].with {
      properties.setProperty('info.app.majorVersion', it[3])
      properties.setProperty('info.app.minorVersion', it[2])
      properties.setProperty('info.app.patchVersion', it[1])

      if (it[5]) {
        properties.setProperty('info.app.testVersion', it[5])
      }

      println("version properties: ${properties}");
    }

    version.replaceAll(/^(((\d+)\.\d+)\.\d+)(-([\w]+))?$/ , '$1')
  }

  if(env.BUILD_NUMBER)
    properties.setProperty('build.number', env.BUILD_NUMBER)

  if ( env.GIT_REVISION )
    properties.setProperty('build.git.revision', env.GIT_REVISION)

  if ( env.GIT_BRANCH )
    properties.setProperty('build.git.branch', env.GIT_BRANCH)

  if (env.GIT_COMMIT)
    properties.setProperty('build.git.commit', env.GIT_COMMIT)

  // Add new properties from various sources
  properties.setProperty('build.time', new Date().format("yyyy-MM-dd HH:mm:ss"))

  properties.setProperty('build.host', InetAddress.localHost.hostName)

  // Get a System property
  properties.setProperty('build.java.version', System.getProperty('java.version'))

  // Write the properties back to the file
  grailsBuildInfoFile.withOutputStream {
    properties.store(it,null)
  }
}

processResources.dependsOn generateDescriptors

/**
 * Docker build config.
 */
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

ext {
  dockerTag = "${project.dockerRepo}/${project.name}:${project.version}${dockerTagSuffix}"
  dockerBuildDir = mkdir("${buildDir}/docker")
}

task prepareDocker(type: Copy, dependsOn: assemble) {
  description = 'Copy files to build directory'
  group = 'Docker'

  from project.jar

  // from otherfileLoc

  into dockerBuildDir
}

task createDockerfile(type: Dockerfile, dependsOn: prepareDocker) {
  description = 'Create a Dockerfile file'
  group = 'Docker'

  destFile = project.file("${dockerBuildDir}/Dockerfile")

  from 'folioci/alpine-jre-openjdk11:latest'
  instruction 'LABEL maintainer="Knowledge Integration"'

  exposePort 8080

  // Copying straight into the default directory should be enough
  copyFile jar.archiveName, '/usr/verticles/application.jar'
}

task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) {
  description = 'Create Docker image to run the Grails application'
  group = 'Docker'

  inputDir = file(dockerBuildDir)
  images.add(dockerTag)
}

tasks.withType(GroovyCompile) {
  configure(groovyOptions) {
    forkOptions.jvmArgs = ['-Xmx1024m']
  }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

webdriverBinaries {
    if (!System.getenv().containsKey('GITHUB_ACTIONS')) {
        chromedriver {
            version = '2.45.0'
            fallbackTo32Bit = true
        }
        geckodriver '0.30.0'
    }
}

tasks.withType(Test) {
  systemProperty "geb.env", System.getProperty('geb.env')
  systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
  if (!System.getenv().containsKey('GITHUB_ACTIONS')) {
    systemProperty 'webdriver.chrome.driver', System.getProperty('webdriver.chrome.driver')
    systemProperty 'webdriver.gecko.driver', System.getProperty('webdriver.gecko.driver')
  } else {
    systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
    systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
  }
}
